########## EXAMPLE ##########
### Data Generation ###
# parameters for signal
Fs <- 1000 # 1000 Hz signal
s <- 3 # 3 seconds of data
t <- seq(0, s - 1/Fs, by = 1/Fs) # time sequence
n <- length(t) # number of data points
freqs <- c(1, 5, 10, 20) # frequencies
amp <- c(2, 1.5, 3, 1.75) # strengths (amplitudes)
phs <- c(0, pi/6, pi/4, pi/2) # phase shifts
# create data generating signals
mu <- rep(0, n)
for(j in 1:length(freqs)){
mu <- mu + amp[j] * sin(2*pi*t*freqs[j] + phs[j])
}
set.seed(1) # set random seed
e <- rnorm(n) # Gaussian error
y <- mu + e # data = mean + error
### FFT of Noise-Free Data ###
# fft of noise-free data
ef <- eegfft(mu, Fs = Fs, upper = 40)
head(ef)
require(reticulate)
require(dplyr)
library(refund)
library(mgcv)
library(pROC)
library(caret)
require(fda.usc)
library(pROC)
library(caret)
library(lattice)
library(wavelets)
library(wavethresh)
library(stats)
plotaroc <- function(rocobj, titulo = "Curva ROC"){
# Função que plota as curvas roc para os modelos ajustados
b <- which.max(rocobj$sensitivities + rocobj$specificities)
best <- round(c(rocobj$thresholds[b],rocobj$specificities[b],rocobj$sensitivities[b]), 3)
pROC::ggroc(rocobj, col = "red", alpha = 0.5, size = 0.5) +
theme_gray() +
ggtitle(titulo) +
geom_abline(intercept = 1, slope=1, linetype = "dashed") +
labs(x="Especificidade", y = "Sensibilidade")  +
geom_point(data = tibble(Sensibilidade = best[2],
Especificidade = best[3]),
mapping = aes(x=Sensibilidade, y=Especificidade),
col = "black") +
geom_text(mapping =  aes(x = best[2] - 0.15,
y = best[3] - 0.05),
label = paste( best[1], "(", best[2], ",", best[3], ")")) +
geom_text(mapping = aes(x = 0.5,
y = 0.01),
label = paste("AUC: ", round(rocobj$auc,3)))
}
data("emotion", package = "FDboost")
str(emotion)
length(emotion$EEG)
x_melted <- as.array(emotion$EEG)
dim(x_melted) <- c(184, 384)
X <- data.frame(id = 1:184)
X[,(2)] <- x_melted[1:184,]
Y <- rep(ifelse(emotion$game_outcome == 'gain', 1, 0))#,28)
data <- data.frame(Y, X)
#set.seed(15)
nrows <- nrow(data)
index <- sample(1:nrows, 0.7 * nrows)	# shuffle and divide
train_model <- data[index,]
test_model <- data[-index,]
x_train_fft <- fft(train$V2)
x_train_fft <- fft(train_model$V2)
train_fft <- data.frame(train_model$Y, x_train_fft)
x.v2.fdata <- fdata(train_fft$V2)
View(train_fft)
x.v2.fdata <- fdata(x_train_fft)
x_train_fft <- fft(train_model$V2)
dim(x_train_fft) <- c(128, 384)
train_fft <- fft(train_model$V2)
dim(train_fft) <- c(128, 384)
x_train_fft <- data.frame(id = 1:128)
